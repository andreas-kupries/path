
[section {Standard API}]

As a derived class of [package [vset PROJECT]] instances of this class
provide the following methods:

[list_begin definitions]
[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method atom-store]]

This method returns the fully-qualified command name of the Atom store
used to intern path elements.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method id] [arg path]]
[call [cmd <instance>] [method id*] [arg word]...]
[call [cmd <instance>] [method id-from] [arg base] [arg path]]
[call [cmd <instance>] [method id-from*] [arg base] [arg word]...]

These methods add the specified [arg path] to the instance, and then
return its unique numeric identifier as their result.

[para] Multiple calls for the same path all return the same
identifier.

[para] The methods whose name ends in [strong *] take the elements of
the path to enter as separate word. The other methods take the
elements as a list in a single argument.

[para] The methods using [strong from] in their take an additional
argument, the identifer of a known path and then enter the new path
relative to this [arg base]. An error is thrown if [arg base] is not
known.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method path] [arg id]]

This method maps the specified numeric [arg id] back to its path, and
returns that path as the result of the method.

[para] An error is thrown if the [arg id] is not known to the
instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method names]]

This method returns a list of all paths which have been interned into
the instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method exists] [arg path]]
[call [cmd <instance>] [method exists*] [arg word]...]
[call [cmd <instance>] [method exists-from] [arg base] [arg path]]
[call [cmd <instance>] [method exists-from*] [arg base] [arg word]...]

This method tests if the specified [arg path] has been interned into
the instance and returns a boolean flag as the result of the
method.

The result is [const true] if the path is known, and [const false]
otherwise.

[para] The variants regarding [strong *] and [strong from] are the
same as for method [method id]. I.e. [strong *] takes the path to
check as separate argument words, and [strong from] checks relative to
a known [arg base] path, specified by its numeric identifier.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method exists-id] [arg id]]

This method tests if the specified numeric [arg id] is known to the
instance and returns a boolean flag as the result of the method.

The result is [const true] if the id is known, and [const false]
otherwise.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method size]]

This method returns the number of interned paths known to the
instance.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method map] [arg path] [arg id]]

This method adds the specified [arg path] to the instance and forces
an association with the specified numeric [arg id].

The result of the method is the empty string.

[para] An error will be thrown however if the [arg id] is already used
for a different path, or if [arg path] is already known under a
different [arg id].

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method clear]]

This method drops all path/id mappings from the instance.
After this method has run the instance is empty.
The result of this method is the empty string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method serialize]]
[call [cmd <instance>] [method -->]]

This method serializes the content of the instance, i.e. the
path-to-id map and returns it as the result of the method.

[para] The result is a Tcl dictionary with the paths as keys and the
associated identifiers as the values. Note, order is important, parent
paths are listed before their children.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method deserialize] [arg serialization]]
[call [cmd <instance>] [method <--] [arg serialization]]

This method takes a [arg serialization] as generated by method
[method serialize] and adds it to the instance.

It uses the method [method map] for this, to preserve the exact
path/id mapping found in the input. On the flip-side this means that
existing mappings may interfere and cause an error to be thrown. Note,
order is important, parent paths have to be listed before their
children for the forced mapping to work.

[para]
If the previous content is not relevant, use method [method load]
instead.
If the exact mapping is not relevant, use method [method merge]
instead.

[para] The result of the method is the empty string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method load] [arg serialization]]
[call [cmd <instance>] [method :=] [arg serialization]]

This method takes a [arg serialization] as generated by method
[method serialize] and uses it to replace previous content of the
instance.

[para] The result of the method is the empty string.

[comment {- - -- --- ----- -------- -------------}]
[call [cmd <instance>] [method merge] [arg serialization]]
[call [cmd <instance>] [method +=] [arg serialization]]

This method takes a [arg serialization] as generated by method
[method serialize] and adds the paths it contains to the instance.

The ids found in the [arg serialization] are ignored and do not
transfer.

[para] The result of the method is the empty string.

[list_end]
