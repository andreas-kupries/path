## -*- tcl -*-
## (c) 2017 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for sqlite stores, custom parts.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy aqn instance of the store under test.

# # ## ### ##### ######## ############# #####################

test [test-class]-1.0 {new, wrong#args, not enough} -body {
    path::sqlite new
} -returnCodes error -result {wrong # args: should be "path::sqlite new atomstore database table"}

test [test-class]-1.1 {new, wrong#args, not enough} -body {
    path::sqlite new A
} -returnCodes error -result {wrong # args: should be "path::sqlite new atomstore database table"}

test [test-class]-1.2 {new, wrong#args, too many} -body {
    path::sqlite new A D
} -returnCodes error -result {wrong # args: should be "path::sqlite new atomstore database table"}

test [test-class]-1.3 {new, wrong#args, too many} -body {
    path::sqlite new A D T X
} -returnCodes error -result {wrong # args: should be "path::sqlite new atomstore database table"}

test [test-class]-1.4 {create, wrong#args, not enough} -body {
    path::sqlite create foo
} -returnCodes error -result {wrong # args: should be "path::sqlite create foo atomstore database table"}

test [test-class]-1.5 {create, wrong#args, not enough} -body {
    path::sqlite create foo A
} -returnCodes error -result {wrong # args: should be "path::sqlite create foo atomstore database table"}

test [test-class]-1.6 {create, wrong#args, not enough} -body {
    path::sqlite create foo A D
} -returnCodes error -result {wrong # args: should be "path::sqlite create foo atomstore database table"}

test [test-class]-1.7 {create, wrong#args, too many} -body {
    path::sqlite create foo A D T X
} -returnCodes error -result {wrong # args: should be "path::sqlite create foo atomstore database table"}

test [test-class]-2.0 {constructor, create, existing command} -setup {
    sqlite3 test-database :memory:
    atom::sqlite create test-atom                   test-database atom
    path::sqlite create test-sqlite-store test-atom test-database foo
} -body {
    path::sqlite create test-sqlite-store test-atom test-database foo
} -cleanup {
    test-sqlite-store destroy
    test-atom destroy
    test-database close
} -returnCodes error -result [already test-sqlite-store]

test [test-class]-2.1 {constructor, create, existing command} -setup {
    sqlite3 test-database :memory:
    atom::sqlite create test-atom test-database atom
} -body {
    path::sqlite create set test-atom test-database foo
} -cleanup {
    test-atom destroy
    test-database close
} -returnCodes error -result [already set]

test [test-class]-2.2 {constructor, create} -setup {
    set result {}
    sqlite3 test-database :memory:
    atom::sqlite create test-atom test-database atom
} -body {
    lappend result [path::sqlite create test-sqlite-store test-atom test-database foo]
    lappend result [info commands ::test-sqlite-store]
    lappend result [test-sqlite-store size]
} -cleanup {
    test-sqlite-store destroy
    test-atom destroy
    test-database close
    unset result
} -result {::test-sqlite-store ::test-sqlite-store 0}

test [test-class]-2.3 {constructor, new} -setup {
    set result {}
    sqlite3 test-database :memory:
    atom::sqlite create test-atom test-database atom
} -body {
    lappend result [set foo [path::sqlite new test-atom test-database foo]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    test-atom destroy
    test-database close
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################
return
